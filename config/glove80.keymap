/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

&sk {
    quick-release;
    release-after-ms = <2000>;
};

&sl { release-after-ms = <2000>; };

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 2>, <&to 2>;
        };

        hrgbstatus_kp: hrgbstatus_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "HRGBSTATUS_KP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&rgb_ug_status_macro>, <&kp>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        to_kp: to_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "TO_KP";
            bindings = <&kp>, <&to>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        tp_mo: tp_mo {
            compatible = "zmk,behavior-hold-tap";
            label = "TP_MO";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
        };

        hp_kp: hp_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "HP_KP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
        };

        tp_kp: tp_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "TP_KP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        hm_kp: hm_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_KP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
        };

        tp_to: tp_to {
            compatible = "zmk,behavior-hold-tap";
            label = "TP_TO";
            bindings = <&to>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
        };

        hold_to_keypad: hold_to_keypad {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TO_KEYPAD";
            bindings = <&to_numpad_layer>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        kp_tap_to_hamkeys: kp_tap_to_hamkeys {
            compatible = "zmk,behavior-hold-tap";
            label = "KP_TAP_TO_HAMKEYS";
            bindings = <&kp>, <&to_ham_keys>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        kp_tap_to_base: kp_tap_to_base {
            compatible = "zmk,behavior-hold-tap";
            label = "KP_TAP_TO_BASE";
            bindings = <&kp>, <&to_base_layer>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        mo_to_base: mo_to_base {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_TO_BASE";
            bindings = <&mo>, <&to_base_layer>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    macros {
        lm: lm {
            label = "lm";
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };

        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        to_base_layer: to_base_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0 &rgb_ug RGB_COLOR_HSB(184,100,3)>;
            label = "TO_BASE_LAYER";
            wait-ms = <20>;
            tap-ms = <20>;
        };

        to_numpad_layer: to_numpad_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 2 &rgb_ug RGB_COLOR_HSB(280,100,2)>;
            label = "TO_NUMPAD_LAYER";
            wait-ms = <20>;
            tap-ms = <20>;
        };

        to_ham_keys: to_ham_keys {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 1 &rgb_ug RGB_COLOR_HSB(37,100,3)>;
            label = "TO_HAM_KEYS";
            wait-ms = <20>;
            tap-ms = <20>;
        };

        txt_rarrow: txt_rarrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "TXT_RARROW";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        txt_colcol: txt_colcol {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp COLON>;
            label = "TXT_COLCOL";
            wait-ms = <1>;
            tap-ms = <1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&magic 6 0                      &kp F1     &kp F2   &kp F3    &kp F4                                                                                                              &kp F5    &kp F6     &kp F7    &kp F8     &kp F9
&hp_kp LS(LA(LC(LGUI))) ESCAPE  &kp N1     &kp N2   &kp N3    &kp N4    &kp N5                                                                                            &kp N6  &kp N7    &kp N8     &kp N9    &kp N0     &kp BACKSPACE
&hm_kp 5 TAB                    &kp Q      &kp W    &kp E     &kp R     &kp T                                                                                             &kp Y   &kp U     &kp I      &kp O     &kp P      &hm_kp 5 BSLH
&kp LCTRL                       &kp A      &kp S    &kp D     &kp F     &kp G                                                                                             &kp H   &kp J     &kp K      &kp L     &kp SEMI   &kp ENTER
&kp_tap_to_hamkeys LSHIFT 0     &kp Z      &kp X    &kp C     &kp V     &kp B   &kp LSHIFT  &kp LCMD  &kp_tap_to_hamkeys LEFT_CONTROL 0  &kp LGUI  &kp RCTRL  &kp RSHIFT  &kp N   &kp M     &kp COMMA  &kp DOT   &kp FSLH   &kp RSHIFT
&kp EQUAL                       &kp GRAVE  &kp SQT  &kp LBKT  &kp RBKT          &kp SPACE   &mo 2     &kp_tap_to_base LALT 0             &kp RALT  &mo 3      &kp SPACE           &kp LEFT  &kp UP     &kp DOWN  &kp RIGHT  &kp MINUS
            >;
        };

        ham_keys {
            bindings = <
&trans           &trans          &trans          &trans          &trans                                                                                                                        &trans          &trans             &trans           &trans            &trans
&trans           &kp LC(LA(N1))  &kp LC(LA(N2))  &kp LC(LA(N3))  &kp LC(LA(N4))  &kp LC(LA(N5))                                                                                &kp LC(LA(N6))  &kp LC(LA(N7))  &kp LC(LA(N8))     &kp LC(LA(N9))   &kp LC(LA(N0))    &trans
&trans           &kp LC(LA(Q))   &kp LC(LA(W))   &kp LC(LA(E))   &kp LC(LA(R))   &kp LC(LA(T))                                                                                 &kp LC(LA(Y))   &kp LC(LA(U))   &kp LC(LA(I))      &kp LC(LA(O))    &kp LC(LA(P))     &kp LC(LA(BSLH))
&lm 4 LCTRL      &kp LC(LA(A))   &kp LC(LA(S))   &kp LC(LA(D))   &to_base_layer  &kp LC(LA(G))                                                                                 &kp LC(LA(H))   &kp LC(LA(J))   &kp LC(LA(K))      &kp LC(LA(L))    &kp LC(LA(SEMI))  &trans
&mo_to_base 4 0  &kp LC(LA(Z))   &kp LC(LA(X))   &kp LC(LA(C))   &kp LC(LA(V))   &kp LC(LA(B))   &lm 4 LSHIFT  &lm 4 LGUI  &lm 4 LCTRL  &lm 4 RGUI  &lm 4 RCTRL  &lm 4 RSHIFT  &kp LC(LA(N))   &kp LC(LA(M))   &kp LC(LA(COMMA))  &kp LC(LA(DOT))  &kp LC(LA(FSLH))  &trans
&trans           &trans          &trans          &trans          &trans                          &trans        &trans      &lm 4 LALT   &lm 4 RALT  &trans       &trans                        &trans          &trans             &trans           &trans            &trans
            >;
        };

        keypad {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                            &trans     &trans        &trans         &trans           &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                     &none          &kp UNDER  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                     &kp COMMA      &kp KP_N7  &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                     &kp KP_DOT     &kp KP_N4  &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans     &trans  &trans  &trans  &trans  &trans  &kp LC(SLASH)  &kp KP_N1  &kp KP_N2     &kp KP_N3      &kp KP_N0        &trans
&trans  &trans  &trans  &trans  &trans          &kp SPACE  &trans  &trans  &trans  &trans  &trans                 &trans     &trans        &trans         &trans           &trans
            >;
        };

        sym {
            bindings = <
&trans     &trans     &trans     &trans     &trans                                                                                 &trans        &trans     &trans         &trans       &trans
&trans     &kp EXCL   &kp AT     &kp POUND  &kp DOLLAR  &kp PERCENT                                                  &kp CARET     &kp AMPS      &kp STAR   &txt_rarrow    &txt_colcol  &trans
&kp TILDE  &kp SQT    &kp LT     &kp LPAR   &kp RPAR    &kp GT                                                       &kp LA(UP)    &kp LA(LEFT)  &kp UP     &kp LA(RIGHT)  &kp PIPE     &kp BSLH
&trans     &kp DQT    &kp UNDER  &kp MINUS  &kp EQUAL   &kp PLUS                                                     &kp LA(DOWN)  &kp LEFT      &kp DOWN   &kp RIGHT      &kp SEMI     &trans
&kp SPACE  &kp GRAVE  &kp LBKT   &kp LBRC   &kp RBRC    &kp RBKT     &trans  &trans  &trans  &trans  &trans  &trans  &kp COLON     &kp QMARK     &kp COMMA  &kp DOT        &kp SLASH    &trans
&trans     &kp F10    &kp F11    &kp F12    &trans                   &trans  &trans  &trans  &trans  &trans  &trans                &kp HOME      &kp PG_UP  &kp PG_DN      &kp END      &trans
            >;
        };

        cmd_qwerty {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans     &trans   &trans    &trans
&trans  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5                                                  &kp N6  &kp N7  &kp N8     &kp N9   &kp N0    &trans
&trans  &kp Q   &kp W   &kp E   &kp R   &kp T                                                   &kp Y   &kp U   &kp I      &kp O    &kp P     &trans
&trans  &kp A   &kp S   &kp D   &kp F   &kp G                                                   &kp H   &kp J   &kp K      &kp L    &kp SEMI  &trans
&trans  &kp Z   &kp X   &kp C   &kp V   &kp B   &trans  &trans  &trans  &trans  &trans  &trans  &kp N   &kp M   &kp COMMA  &kp DOT  &kp FSLH  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans     &trans   &trans    &trans
            >;
        };

        nav {
            bindings = <
&none            &bt_0         &bt_1            &bt_2            &bt_3                                                                                  &none         &none     &none          &none    &none
&none            &kp F1        &kp F2           &kp F3           &kp F4           &kp F5                                                  &kp F6        &kp F7        &kp F8    &kp F9         &kp F10  &kp F11
&none            &kp C_BRI_UP  &kp C_VOL_DN     &kp C_MUTE       &kp C_VOL_UP     &none                                                   &kp LA(UP)    &kp LA(LEFT)  &kp UP    &kp LA(RIGHT)  &kp INS  &kp F12
&none            &kp C_BRI_DN  &kp C_PREV       &kp C_PP         &kp C_NEXT       &none                                                   &kp LA(DOWN)  &kp LEFT      &kp DOWN  &kp RIGHT      &kp DEL  &none
&rgb_ug RGB_TOG  &none         &rgb_ug RGB_BRD  &rgb_ug RGB_EFF  &rgb_ug RGB_BRI  &none   &trans  &trans  &trans  &trans  &trans  &trans  &to 2         &to 4         &to 1     &none          &to 0    &none
&none            &none         &rgb_ug RGB_SPD  &rgb_ug RGB_EFR  &rgb_ug RGB_SPI          &trans  &trans  &trans  &trans  &trans  &trans                &none         &none     &none          &none    &none
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR            &bt_0            &bt_1            &bt_2            &bt_3                                                                                     &none  &none  &none  &out OUT_USB  &bt BT_CLR_ALL
&none                 &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none         &none
&none                 &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none         &none
&bootloader           &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none         &bootloader
&sys_reset            &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none         &sys_reset
&rgb_ug_status_macro  &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none         &none
            >;
        };
    };
};
