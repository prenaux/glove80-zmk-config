/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

&sk {
    quick-release;
    release-after-ms = <2000>;
};

&sl { release-after-ms = <2000>; };

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 0>, <&to 0>;
        };

        hrgbstatus_kp: hrgbstatus_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "HRGBSTATUS_KP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&rgb_ug_status_macro>, <&kp>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        hp_mo: hp_mo {
            compatible = "zmk,behavior-hold-tap";
            label = "HP_MO";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
        };

        ht_lthumb1: ht_lthumb1 {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_LTHUMB1";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 70 71 72 73 74 75 76 77 78 79>;
            flavor = "balanced";
            quick-tap-ms = <125>;
        };

        ht_lthumb2: ht_lthumb2 {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_LTHUMB2";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 71 72 73 74 75 76 77 78 79 69>;
            quick-tap-ms = <125>;
            flavor = "balanced";
        };
    };

    macros {
        lm: lm {
            label = "lm";
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };

        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        to_base_layer: to_base_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0 &rgb_ug RGB_COLOR_HSB(184,100,3)>;
            label = "TO_BASE_LAYER";
            wait-ms = <20>;
            tap-ms = <20>;
        };

        to_numpad_layer: to_numpad_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0 &rgb_ug RGB_COLOR_HSB(280,100,2)>;
            label = "TO_NUMPAD_LAYER";
            wait-ms = <20>;
            tap-ms = <20>;
        };

        to_ham_keys: to_ham_keys {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0 &rgb_ug RGB_COLOR_HSB(37,100,3)>;
            label = "TO_HAM_KEYS";
            wait-ms = <20>;
            tap-ms = <20>;
        };

        txt_rarrow: txt_rarrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "TXT_RARROW";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        txt_colcol: txt_colcol {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp COLON>;
            label = "TXT_COLCOL";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        txt_farrow: txt_farrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>;
            label = "TXT_FARROW";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        txt_larrow: txt_larrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp MINUS>;
            label = "TXT_LARROW";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        txt_ddd: txt_ddd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp DOT &kp DOT>;
            label = "TXT_DDD";
            wait-ms = <1>;
            tap-ms = <1>;
        };
    };

    combos {
        compatible = "zmk,combos";

        df {
            bindings = <&kp BACKSPACE>;
            key-positions = <37 38>;
            timeout-ms = <50>;
        };

        xc {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <48 49>;
        };

        cv {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <49 50>;
            timeout-ms = <50>;
        };

        jk {
            bindings = <&kp BACKSPACE>;
            key-positions = <41 42>;
            timeout-ms = <50>;
        };

        kl {
            bindings = <&kp DELETE>;
            key-positions = <42 43>;
            timeout-ms = <50>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&magic 3 0  &kp F1     &kp F2         &kp F3    &hrgbstatus_kp 0 F4                                                                                                         &hp_mo 3 F5  &kp F6     &kp F7   &kp F8     &kp F9
&kp SLASH   &kp N1     &kp N2         &kp N3    &kp N4               &kp N5                                                                                         &kp N6  &kp N7       &kp N8     &kp N9   &kp N0     &kp BACKSPACE
&kp TAB     &kp Q      &kp W          &kp E     &kp R                &kp T                                                                                          &kp Y   &kp U        &kp I      &kp O    &kp P      &kp EQUAL
&kp ESC     &kp A      &kp S          &kp D     &kp F                &kp G                                                                                          &kp H   &kp J        &kp K      &kp L    &kp SEMI   &kp MINUS
&kp LSHIFT  &kp Z      &kp X          &kp C     &kp V                &kp B   &mt LCMD LS(LA(LC(SPACE)))  &kp LSHIFT  &kp F10  &kp HOME  &kp DELETE   &kp BACKSPACE  &kp N   &kp M        &kp COMMA  &kp DOT  &kp SQT    &kp RSHIFT
&mo 2       &kp GRAVE  &kp BACKSLASH  &kp LBKT  &kp RBKT                     &kp LALT                    &kp LCTRL   &kp F11  &kp END   &lt 1 ENTER  &kp SPACE              &kp LEFT     &kp DOWN   &kp UP   &kp RIGHT  &mo 2
            >;
        };

        sym {
            bindings = <
&trans     &trans     &trans          &trans     &trans                                                                                   &trans        &trans    &trans         &trans             &trans
&kp GRAVE  &kp EXCL   &kp AT          &kp POUND  &kp DOLLAR  &kp PERCENT                                                    &kp CARET     &kp AMPS      &kp STAR  &kp LPAR       &kp RPAR           &trans
&kp TILDE  &kp EQUAL  &kp SLASH       &kp LPAR   &kp RPAR    &kp BACKSLASH                                                  &kp LC(UP)    &kp LC(LEFT)  &kp UP    &kp LC(RIGHT)  &txt_colcol        &kp PLUS
&trans     &kp PLUS   &kp QUESTION    &kp LBRC   &kp RBRC    &kp PIPE                                                       &kp LC(DOWN)  &kp LEFT      &kp DOWN  &kp RIGHT      &kp COLON          &kp UNDERSCORE
&trans     &kp MINUS  &kp UNDERSCORE  &kp LBKT   &kp RBKT    &txt_farrow    &trans  &trans  &trans  &trans  &trans  &trans  &txt_larrow   &txt_rarrow   &kp LT    &kp GT         &kp DOUBLE_QUOTES  &trans
&trans     &trans     &trans          &trans     &trans                     &trans  &trans  &trans  &trans  &trans  &trans                &trans        &trans    &trans         &trans             &trans
            >;
        };

        nav {
            bindings = <
&trans  &none       &none         &none       &none                                                                           &none       &none     &none          &none            &trans
&trans  &kp F1      &kp F2        &kp F3      &kp F4        &kp F5                                                  &kp F6    &kp F7      &kp F8    &kp F9         &kp F10          &kp DEL
&trans  &kp F11     &kp F12       &none       &none         &none                                                   &none     &none       &none     &none          &kp PRINTSCREEN  &trans
&trans  &bl BL_INC  &kp C_PREV    &kp C_PP    &kp C_NEXT    &none                                                   &kp CLCK  &kp INSERT  &kp HOME  &kp PG_UP      &kp SCROLLLOCK   &trans
&trans  &bl BL_DEC  &kp C_VOL_DN  &kp C_MUTE  &kp C_VOL_UP  &none   &trans  &trans  &trans  &trans  &trans  &trans  &none     &kp DEL     &kp END   &kp PAGE_DOWN  &kp PAUSE_BREAK  &trans
&trans  &trans      &trans        &trans      &trans                &trans  &trans  &trans  &trans  &trans  &trans            &trans      &trans    &trans         &trans           &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR            &bt_0            &bt_1            &bt_2            &bt_3                                                                                               &none            &none            &none            &out OUT_USB     &bt BT_CLR_ALL
&none                 &none            &none            &none            &none            &none                                                                       &none  &none            &none            &none            &none            &none
&none                 &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                             &none  &none            &none            &none            &none            &none
&bootloader           &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                             &none  &none            &none            &none            &none            &bootloader
&sys_reset            &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none            &none  &none            &none            &none            &none            &sys_reset
&rgb_ug_status_macro  &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &rgb_ug RGB_TOG         &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &rgb_ug RGB_EFR  &rgb_ug RGB_EFF  &none
            >;
        };
    };
};
